server:
  port: 8009


#spring.cloud.stream.bindings.incomingorders-out-0:
#  destination: approved-orders
#spring.cloud.stream.bindings.incomingorders-out-1:
#  destination: failed-orders
spring.cloud.stream.bindings.orders-in-0:
  destination: orders
spring.cloud.stream.kafka.streams.bindings.orders-in-0:
  consumer:
    valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde




spring.cloud.stream.bindings.process-in-0:
  destination: purchase-events
spring.cloud.stream.bindings.process-in-1:
  destination: product-feed
spring.cloud.stream.kafka.streams.bindings.process-in-0:
  consumer:
    valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
spring.cloud.stream.kafka.streams.bindings.process-in-1:
  consumer:
    valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    materializedAs: all-products
spring.cloud.stream.kafka.streams.binder:
  brokers: localhost
  configuration:
    schema.registry.url: http://localhost:8081
    commit.interval.ms: 1000
spring.cloud.stream.kafka.streams.binder.autoAddPartitions: true
spring.cloud.stream.kafka.streams.binder.minPartitionCount: 4
spring.cloud.stream.kafka.streams.binder.configuration.application.server: localhost:8080

spring.application.name: kafka-streams-iq-advanced-sample
spring:
  kafka:
    bootstrap-servers:
      - localhost:9092
    properties:
      schema.registry.url: http://localhost:8081
    consumer:
      group-id: group_id
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
    template:
      default-topic:
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: create
  datasource:
    platform: postgres
    url: jdbc:postgresql://localhost:5433/productdb
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver